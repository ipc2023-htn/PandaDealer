BASEPATH_ := $(dir $(realpath $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))))
#BASEPATH_ := $(dir $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST)))

CC ?= gcc
CXX ?= g++
SCAN_BUILD ?= scan-build
PYTHON2 ?= python2
CPPCHECK ?= cppcheck

SYSTEM = $(shell uname)

SYSTEM_LDFLAGS =

DEBUG ?= no
PROFIL ?= no
WERROR ?= no

ifeq '$(PROFIL)' 'yes'
  DEBUG = yes
endif

ifeq '$(DEBUG)' 'yes'
  CFLAGS = -g
else
  # force to use optimizations
  CFLAGS += -O3
endif
ifeq '$(PROFIL)' 'yes'
  CFLAGS += -pg -no-pie
endif
CFLAGS += -Wall -pedantic --std=gnu99
CFLAGS += -Wno-missing-braces

ifeq '$(WERROR)' 'yes'
  CFLAGS += -Werror
endif

LDFLAGS += -pthread
LDFLAGS += $(SYSTEM_LDFLAGS)

OPTS_CFLAGS ?=
OPTS_LDFLGS ?=
USE_LOCAL_OPTS ?= $(shell if test -f $(BASEPATH_)/third-party/opts/libopts.a; then echo "yes"; else echo "no"; fi;)
ifeq '$(USE_LOCAL_OPTS)' 'yes'
  OPTS_CFLAGS := -I$(BASEPATH_)/third-party/opts
  OPTS_LDFLAGS := -L$(BASEPATH_)/third-party/opts -lopts
endif

BORUVKA_CFLAGS ?=
BORUVKA_LDFLAGS ?=
USE_LOCAL_BORUVKA ?= $(shell if test -f $(BASEPATH_)/third-party/boruvka/libboruvka.a; then echo "yes"; else echo "no"; fi;)
ifeq '$(USE_LOCAL_BORUVKA)' 'yes'
  BORUVKA_CFLAGS := -I$(BASEPATH_)/third-party/boruvka
  BORUVKA_LDFLAGS := -L$(BASEPATH_)/third-party/boruvka -lboruvka
endif

ifeq '$(BOR_CPLEX_CFLAGS)' ''
  ifneq '$(CPLEX_CFLAGS)' ''
    BOR_CPLEX_CFLAGS := $(CPLEX_CFLAGS)
  endif
endif

ifeq '$(BOR_GUROBI_CFLAGS)' ''
  ifneq '$(GUROBI_CFLAGS)' ''
    BOR_GUROBI_CFLAGS := $(GUROBI_CFLAGS)
  endif
endif

USE_LOCAL_LPSOLVE ?= $(shell if test -f $(BASEPATH_)/third-party/lpsolve/liblpsolve.a; then echo "yes"; else echo "no"; fi;)
ifeq '$(USE_LOCAL_LPSOLVE)' 'yes'
  LPSOLVE_CFLAGS := -I$(BASEPATH_)/third-party
  LPSOLVE_LDFLAGS := -L$(BASEPATH_)/third-party/lpsolve -llpsolve -ldl
endif

ifeq '$(BOR_LPSOLVE_CFLAGS)' ''
  ifneq '$(LPSOLVE_CFLAGS)' ''
    BOR_LPSOLVE_CFLAGS := $(LPSOLVE_CFLAGS)
  endif
endif


BOR_CC := $(CC)

_BOR_MAKE_VARS := $(filter BOR_%, $(.VARIABLES))
_BOR_MAKE_DEF := $(foreach V,$(_BOR_MAKE_VARS),$(V:BOR_%=%)="$($(V))") DEBUG=no


BLISS_VERSION = 0.73
BLISS_CFLAGS ?=
BLISS_LDFLAGS ?=
USE_LOCAL_BLISS ?= $(shell if test -f $(BASEPATH_)/third-party/bliss/libbliss.a; then echo "yes"; else echo "no"; fi;)
ifeq '$(USE_LOCAL_BLISS)' 'yes'
  BLISS_CFLAGS := -I$(BASEPATH_)/third-party
  BLISS_LDFLAGS := -L$(BASEPATH_)/third-party/bliss -lbliss -lstdc++
endif


LP_LDFLAGS := $(CPLEX_LDFLAGS) $(GUROBI_LDFLAGS) $(LPSOLVE_LDFLAGS)

.DEFAULT_GOAL := all

help:
	@echo "Targets:"
	@echo "    all            - Build library"
	@echo "    doc            - Build documentation"
	@echo "    check          - Build & Run automated tests"
	@echo "    check-valgrind - Build & Run automated tests in valgrind(1)"
	@echo "    check-segfault - Build & Run automated tests in valgrind(1) set up to detect only segfaults"
	@echo "    clean          - Remove all generated files"
	@echo "    analyze        - Perform static analysis using Clang Static Analyzer"
	@echo "    submodule      - Fetch all submodules using git."
	@echo "    third-party    - Build all third-party projects."
	@echo "    third-party-clean - Clean all third-party projects."
	@echo ""
	@echo "Options:"
	@echo "    CC         - Path to C compiler          (=$(CC))"
	@echo "    CXX        - Path to C++ compiler        (=$(CXX))"
	@echo "    SCAN_BUILD - Path to scan-build          (=$(SCAN_BUILD))"
	@echo "    PYTHON2    - Path to python v2 interpret (=$(PYTHON2))"
	@echo ""
	@echo "    DEBUG      'yes'/'no' - Turn on/off debugging   (=$(DEBUG))"
	@echo "    PROFIL     'yes'/'no' - Compiles profiling info (=$(PROFIL))"
	@echo ""
	@echo "Variables:"
	@echo "  Note that most of can be preset or changed by user"
	@echo "    SYSTEM            = $(SYSTEM)"
	@echo "    CFLAGS            = $(CFLAGS)"
	@echo "    LDFLAGS           = $(LDFLAGS)"
	@echo "    USE_LOCAL_OPTS    = $(USE_LOCAL_OPTS)"
	@echo "    OPTS_CFLAGS       = $(OPTS_CFLAGS)"
	@echo "    OPTS_LDFLAGS      = $(OPTS_LDFLAGS)"
	@echo "    USE_LOCAL_BORUVKA = $(USE_LOCAL_BORUVKA)"
	@echo "    BORUVKA_CFLAGS    = $(BORUVKA_CFLAGS)"
	@echo "    BORUVKA_LDFLAGS   = $(BORUVKA_LDFLAGS)"
	@echo "    BLISS_CFLAGS      = $(BLISS_CFLAGS)"
	@echo "    BLISS_LDFLAGS     = $(BLISS_LDFLAGS)"
	@echo ""
	@echo "    CPLEX_CFLAGS    = $(CPLEX_CFLAGS)"
	@echo "    CPLEX_LDFLAGS   = $(CPLEX_LDFLAGS)"
	@echo "    GUROBI_CFLAGS   = $(GUROBI_CFLAGS)"
	@echo "    GUROBI_LDFLAGS  = $(GUROBI_LDFLAGS)"
	@echo "    LPSOLVE_CFLAGS  = $(LPSOLVE_CFLAGS)"
	@echo "    LPSOLVE_LDFLAGS = $(LPSOLVE_LDFLAGS)"
	@echo "    LP_LDFLAGS      = $(LP_LDFLAGS)"
	@echo
	@echo "Boruvka make variables: $(_BOR_MAKE_DEF)"

# These variables should not be passed to sub-makes
unexport CFLAGS
unexport CXXFLAGS
unexport LDFLAGS
